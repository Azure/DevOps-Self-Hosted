parameters:
  - name: environment
    default:
  - name: deploymentsToPerform
    default:
  - name: osType
    default:
  - name: waitForImageBuild
    default:
  - name: removeImageTemplateResources
    default: true

jobs:
  - deployment: cleanup_job
    displayName: Cleanup temporal resources from previous runs
    environment: ${{ parameters.environment }}
    timeoutInMinutes: 120
    condition: |
      and(
        succeeded(),
        eq('${{ parameters.removeImageTemplateResources }}', 'true')
      )
    pool:
      vmImage: '$(vmImage_${{ parameters.environment }})'
      name: '$(poolName_${{ parameters.environment }})'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            # [Agent] Prepare environment
            #----------------------------
            - task: PowerShell@2
              displayName: 'Setup agent'
              inputs:
                targetType: inline
                pwsh: true
                script: |
                  # Load used functions
                  . (Join-Path '$(System.DefaultWorkingDirectory)' '$(sharedOrchestrationFunctionsPath)' 'agent' 'Set-EnvironmentOnAgent.ps1')

                  # Define PS modules to install on the runner
                  $Modules = @(
                    @{ Name = 'Az.Accounts' }
                  )

                  # Set agent up
                  Set-EnvironmentOnAgent -PSModules $Modules
            - task: AzureCLI@2
              name: Remove_ImageTemplates_Task
              displayName: 'Remove previous Image Template resources'
              inputs:
                addSpnToEnvironment: true
                azureSubscription: '$(serviceConnection_${{ parameters.environment }})'
                scriptType: pscore
                scriptLocation: inlineScript
                inlineScript: |
                  # Load PS-Profile configuration
                  . $profile

                  # Login to Azure-Powershell context
                  $null = Connect-AzAccount -ApplicationId $env:servicePrincipalId -Tenant $env:tenantId -FederatedToken $env:idToken

                  Write-Verbose "Load function" -Verbose
                  .  (Join-Path '$(System.DefaultWorkingDirectory)' '$(orchestrationFunctionsPath)' 'image' 'Remove-ImageTemplate.ps1')

                  $functionInput = @{
                    TemplateFilePath = Join-Path '$(deploymentFilesPath)' '${{ parameters.environment }}.image.bicep'
                  }

                  Write-Verbose "Invoke task with" -Verbose
                  Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

                  Remove-ImageTemplate @functionInput -Verbose
            - task: AzureCLI@2
              name: Remove_DeploymentScripts_Task
              displayName: 'Remove previous Deployment Script resources'
              inputs:
                addSpnToEnvironment: true
                azureSubscription: '$(serviceConnection_${{ parameters.environment }})'
                scriptType: pscore
                scriptLocation: inlineScript
                inlineScript: |
                  # Load PS-Profile configuration
                  . $profile

                  # Login to Azure-Powershell context
                  $null = Connect-AzAccount -ApplicationId $env:servicePrincipalId -Tenant $env:tenantId -FederatedToken $env:idToken

                  Write-Verbose "Load function" -Verbose
                  .  (Join-Path '$(System.DefaultWorkingDirectory)' '$(orchestrationFunctionsPath)' 'image' 'Remove-DeploymentScript.ps1')

                  $functionInput = @{
                    TemplateFilePath = Join-Path '$(deploymentFilesPath)' '${{ parameters.environment }}.image.bicep'
                  }

                  Write-Verbose "Invoke task with" -Verbose
                  Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

                  Remove-DeploymentScript @functionInput -Verbose
            - task: AzureCLI@2
              name: Clean_StagingRG_Task
              displayName: 'Cleanup resources from Staging Resource Group'
              inputs:
                addSpnToEnvironment: true
                azureSubscription: '$(serviceConnection_${{ parameters.environment }})'
                scriptType: pscore
                scriptLocation: inlineScript
                inlineScript: |
                  # Load PS-Profile configuration
                  . $profile

                  # Login to Azure-Powershell context
                  $null = Connect-AzAccount -ApplicationId $env:servicePrincipalId -Tenant $env:tenantId -FederatedToken $env:idToken

                  Write-Verbose "Load function" -Verbose
                  .  (Join-Path '$(System.DefaultWorkingDirectory)' '$(orchestrationFunctionsPath)' 'image' 'Remove-ResourcesInStagingRg.ps1')

                  $functionInput = @{
                    TemplateFilePath = Join-Path '$(deploymentFilesPath)' '${{ parameters.environment }}.image.bicep'
                  }

                  Write-Verbose "Invoke task with" -Verbose
                  Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

                  Remove-ResourcesInStagingRg @functionInput -Verbose

  - deployment: deploy_job
    displayName: Deploy Resources
    dependsOn:
      - ${{ if eq( parameters.removeImageTemplateResources, true) }}:
          - cleanup_job
    environment: ${{ parameters.environment }}
    condition: |
      and(
        succeeded(),
        not(eq('${{ parameters.deploymentsToPerform }}', 'Only removal'))
      )
    timeoutInMinutes: 120
    pool:
      vmImage: '$(vmImage_${{ parameters.environment }})'
      name: '$(poolName_${{ parameters.environment }})'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            # [Agent] Prepare environment
            #----------------------------
            - task: PowerShell@2
              displayName: 'Setup agent'
              inputs:
                targetType: inline
                pwsh: true
                script: |
                  # Load used functions
                  . (Join-Path '$(System.DefaultWorkingDirectory)' '$(sharedOrchestrationFunctionsPath)' 'agent' 'Set-EnvironmentOnAgent.ps1')

                  # Define PS modules to install on the runner
                  $Modules = @(
                      @{ Name = 'Az.Accounts' },
                      @{ Name = 'Az.Resources' }
                  )

                  # Set agent up
                  Set-EnvironmentOnAgent -PSModules $Modules
            # [Deployment] task(s)
            #---------------------
            - task: AzureCLI@2
              displayName: 'Deploy [image.deploy.bicep] via service connection [$(serviceConnection_${{ parameters.environment }})]'
              inputs:
                addSpnToEnvironment: true
                azureSubscription: '$(serviceConnection_${{ parameters.environment }})'
                scriptType: pscore
                scriptLocation: inlineScript
                inlineScript: |
                  # Load PS-Profile configuration
                  . $profile

                  # Login to Azure-Powershell context
                  $null = Connect-AzAccount -ApplicationId $env:servicePrincipalId -Tenant $env:tenantId -FederatedToken $env:idToken

                  # Load used functions
                  . (Join-Path '$(System.DefaultWorkingDirectory)' '$(sharedOrchestrationFunctionsPath)' 'deployment' 'New-TemplateDeployment.ps1')
                  . (Join-Path '$(System.DefaultWorkingDirectory)' '$(sharedOrchestrationFunctionsPath)' 'deployment' 'Test-TemplateDeployment.ps1')

                  # ----------------- #
                  # INVOKE DEPLOYMENT #
                  # ----------------- #
                  $functionInput = @{
                    TemplateFilePath           = Join-Path '$(deploymentFilesPath)' '${{ parameters.environment }}.image.${{ parameters.osType }}.bicep'
                    DeploymentMetadataLocation = '$(deploymentMetadataLocation)'
                    SubscriptionId             = (Get-AzContext).Subscription.Id
                    RepoRoot                   = '$(System.DefaultWorkingDirectory)'
                    AdditionalParameters       = @{
                      waitForImageBuild = [System.Convert]::ToBoolean('${{ parameters.waitForImageBuild }}')
                    }
                  }

                  # Inject control parmaeters from pipeline
                  $functionInput['additionalParameters'] += @{
                    deploymentsToPerform = '${{ parameters.deploymentsToPerform }}'
                  }

                  Write-Verbose "Invoke task with" -Verbose
                  Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

                  # Validate deployment
                  Test-TemplateDeployment @functionInput

                  # Invoke deployment
                  New-TemplateDeployment @functionInput -Verbose
